pluginManagement {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        //皮肤打包插件本地仓库
        maven { url uri('./.m2/repository') }
        mavenLocal()
        maven { url 'https://jitpack.io' }

        gradlePluginPortal()
        google()
        mavenCentral()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://jitpack.io' }
        google()
        mavenCentral()
    }
}
rootProject.name = "Skin"
// 读取环境变量
def includeApp = System.getenv('INCLUDE_APP') ?: 'true'
println "INCLUDE_APP: ${includeApp}"
// 根据环境变量决定是否包含 app 模块, jitpack构建时不包含app模块
if (includeApp.toBoolean()) {
    include ':app'
}
include ':skin'
include ':plugin'
include ':compiler'
include ':annotations'
